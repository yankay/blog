<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>NoSQL &#8211; 我自然</title>
	<atom:link href="./index.html" rel="self" type="application/rss+xml" />
	<link>./../../../index.html</link>
	<description>颜开的博客</description>
	<lastBuildDate>Sun, 28 Mar 2021 13:02:04 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>

<image>
	<url>./../../../wp-content/uploads/2021/03/cropped-favicon-32x32.png</url>
	<title>NoSQL &#8211; 我自然</title>
	<link>./../../../index.html</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>NoSQL反模式 &#8211; 文档数据库篇</title>
		<link>./../../../nosql-anti-pattern-document/index.html</link>
					<comments>./../../../nosql-anti-pattern-document/index.html#comments</comments>
		
		<dc:creator><![CDATA[yankay]]></dc:creator>
		<pubDate>Fri, 25 Jan 2013 13:03:37 +0000</pubDate>
				<category><![CDATA[每日心得]]></category>
		<category><![CDATA[NoSQL]]></category>
		<category><![CDATA[反模式]]></category>
		<category><![CDATA[文档数据库]]></category>
		<guid isPermaLink="false">http://www.yankay.com/?p=26652</guid>

					<description><![CDATA[<p>我们设计关系数据库Schema的都有一套完整的方案，而NoSQL却没有这些。半年前笔者读了本《SQL反模式》的书，觉得非常好。就开始留意，对于NoSQL是否也有反模式？</p>
<p><a rel="nofollow" href="./../../../nosql-anti-pattern-document/index.html">NoSQL反模式 &#8211; 文档数据库篇</a>最先出现在<a rel="nofollow" href="./../../../index.html">我自然</a>。</p>
]]></description>
										<content:encoded><![CDATA[<p>我们设计关系数据库Schema的都有一套完整的方案，而NoSQL却没有这些。半年前笔者读了本《SQL反模式》的书，觉得非常好。就开始留意，对于NoSQL是否也有反模式？好的反模式可以在我们设计Schema告诉哪里是陷阱和悬崖。NoSQL宣传的时候往往宣称是SchemaLess的，这会让人误解其不需要设计Schema。但如果不意识到设计Schema的必要，陷阱就在一直在黑暗中等着我们。这篇文章就总结一些别人的，也有自己犯过的深痛的设计Schema错误。</p>
<p>NoSQL数据库最主流的有文档数据库，列存数据库，键值数据库。三者分别有代表作MongoDB，HBase和Redis。如果将NoSQL比作兵器的话，可以这样(MySQL是典型的关系型数据库，一样参与比较)：</p>
<ul>
<li><strong>MySQL</strong>产生年代较早，而且随着LAMP大潮得以成熟。尽管其没有什么大的改进，但是新兴的互联网使用的最多的数据库。就像传统的菜刀，结构简单，几百年没有改进。但是不妨碍产生各式各样的刀法，只要有一把，就能胜任厨房里的大部分事务。MySQL也是一样，核心已经稳定。但是切库，分表，备份，监控，等等手段一应俱全。</li>
<li><strong>MongoDB</strong>是个新生事物，提供更灵活的Schema，Capped Collection，异步提交，地理位置索引等五花十色的功能。就像瑞士军刀，不但可以当刀用，还可以开瓶盖，剪指甲。但是他也不比MySQL强，因为还缺乏时间的磨砺。一是系统本身的稳定性，二是开发，运维需要更多经验才能流行。</li>
<li><strong>HBase</strong>是个仗势欺人的大象兵。依仗着Hadoop的生态环境，可以有很好的扩展性。但是就像象兵一样，使用者需要养一头大象(Hadoop),才能驱使他。</li>
<li><strong>Redis</strong>是键值存储的代表，功能最简单。提供随机数据存储。就像一根棒子一样，没有多余的构造。但是也正是因此，他的伸缩性特别好。就像悟空手里的金箍棒，大可捅破天，小能成缩成针。</li>
</ul>
<h3>文档数据库的得失</h3>
<p>关系模型试图将数据库模型和数据库实现分开，让开发者可以脱离底层很好的操作数据。但笔者以为关系模型在一些应用场景下有弱点，现在已经不得不面对。</p>
<ul>
<li><strong><strong><strong>SQL</strong></strong>弱点一：必须支持Join</strong>。因为数据不能够有重复。所以使用范式的关系模型会不可避免的大量Join。如果参与Join的是一张比内存小的表还好。但是如果大表Join或者表分布在多台机器上的话，Join就是性能的噩梦。</li>
<li><strong><strong>SQL弱点二：</strong>计算和存储耦合</strong>。关系模型作为统一的数据模型既可以用于数据分析，也可以用于在线业务。但这两者一个强调高吞吐，一个强调低延时，已经演化出完全不同的架构。用同一套模型来抽象显然是不合适的。Hadoop针对的就是计算的部分。MongoDB,Redis等针对在线业务。两者都抛弃了关系模型。</li>
</ul>
<p>针对这两个梦魇。文档数据库如MongoDB的的主要目的是<strong> 提供更丰富的数据结构来抛弃Join来适应在线业务</strong>。当然也不是MongoDB完全不能用Join，不能拿来做数据分析，讨论这个只是见仁见智的问题。所以文档数据库并不比关系数据库强大，由于对Join的弱支持，功能会弱许多。设计关系模型的时候，通常只需要考虑好数据直接的关系，定义数据模型。而设计文档数据库模型的时候，还需要考虑应用如何使用。因此设计好一个的文档数据库Schema比设计关系模型更加的困难。除此之外，由于文档数据库事务的支持也是比较弱，一般NoSQL只会提供一个行锁。这也给设计Schema更加增加了难度。对于文档数据库的使用有很多需要注意的地方，本文只关注模型设计的部分。</p>
<h3>反模式一：惯性思维/沿用关系模型</h3>
<p>关系模型是数据存储的经典模型，使用数据模型范式的好处非常的明显。但是由于文档数据库不支持Join(包括和外键息息相关的外键约束)等特性，习惯性的沿用关系模型有的时候会出现问题。需要利用起文档数据库提供的丰富的数据模型来应对。</p>
<p>值得一提的是文档数据库的设计和关系模型不同，是灵活多样的。对于同一个情形，可以设计出有多种能够工作的模型，没有绝对意义上最好的模型。</p>
<p>下图是关系模型和文档模型的对比。</p>
<p>这个一个博客的数据模型，有Blog,User等表。左侧是关系模型，右侧是文档模型。这个文档模型并不是完全合理，可以作为“正反两面教材”在下文不断阐述。</p>
<p><strong>问题一：存在描述多对多的关系表</strong><br />
症状：文档数据库中存储在有纯粹的关系表，例如：</p>
<table>
<tbody>
<tr>
<td valign="top" width="213">id</td>
<td valign="top" width="213">user_id</td>
<td valign="top" width="213">blog_id</td>
</tr>
<tr>
<td valign="top" width="213">0</td>
<td valign="top" width="213">0</td>
<td valign="top" width="213">0</td>
</tr>
<tr>
<td valign="top" width="213">1</td>
<td valign="top" width="213">0</td>
<td valign="top" width="213">1</td>
</tr>
</tbody>
</table>
<p>这样的表就算在关系模型中也是不妥的，因为这个ID非常的多余，可以用联合主键来解决。但是在文档数据库中，由于必须强制单主键，不得不采取这样的设计。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">破坏数据完备性。由于ID是主键，在数据模型上没有约束来保证不出现重复的user_id,blog_id对。一旦数据出现重复，更新删除都是问题。</span></li>
<li><span style="line-height: 22px;">索引过多。由于是关系表，必须在user_id和blog_id上面分别建一个索引。影响性能。</span></li>
</ol>
<p>解决方案：<br />
使用文档数据库典型的处理多对多的办法。不是建立一张关系表，而是在其中一个文档(如User)中，加入一个List字段。</p>
<div></div>
<table>
<tbody>
<tr>
<td valign="top" width="160">user_id</td>
<td valign="top" width="160">user_name</td>
<td valign="top" width="160">blog_id[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">Jake</td>
<td valign="top" width="160">0,1</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">1</td>
<td valign="top" width="160">Rose</td>
<td valign="top" width="160">1,2</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p><strong>问题二:没有区分&#8221;一对多关系&#8221;和“多对一关系”</strong><br />
症状：关系模型不区分“一对多”和“多对一”，对于文档数据库来讲，关系模型只有“多对一”。就像这张Comment表：</p>
<table>
<tbody>
<tr>
<td valign="top" width="160">comment_id</td>
<td valign="top" width="160">user_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“NoSQL反模式是好文章”</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">1</td>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“是啊”</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p>如果整个模型都是这样的“多对一”关系就需要反思了。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">额外索引。如果客户端已知user_id,需要获得User信息和Comment信息，需要执行两次查询。其中一次查询需要使用索引。并且要在客户端自己Join。这样可能有潜在性能问题。</span></li>
</ol>
<p>解决方案：<br />
问题的核心在于是已知user_id查询两张表，还是已知comment_id查询两张表。如果是已知comment_id这样的设计就是合理的，但是如果是已知user_id来查询，把关系放在user表里的设计更合理一些。</p>
<div></div>
<table>
<tbody>
<tr>
<td valign="top" width="160">user_id</td>
<td valign="top" width="160">user_name</td>
<td valign="top" width="160">comment_id[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">Jake</td>
<td valign="top" width="160">0,1</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">1</td>
<td valign="top" width="160">Rose</td>
<td valign="top" width="160">1,2</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p>这样的设计，就可以避免一个索引。同理，对于多对多也是一样的，通过合理的安排字段的位置可以避免索引。</p>
<p>正确使用的场合：</p>
<p>关系型模型是非常成功的数据模型，合理的沿用是非常好的。但是由于文档数据库的特点，需要适当的调整，这样得出的数据模型，尽管性能不是最优，但是有最好的灵活性。并且也有利于和关系数据库转换。</p>
<h3>反模式二：处处引用客户端Join</h3>
<p>症状：数据库设计中充满了xx_id的字端，在查询的时候需要大量的手动Join操作。就涉及到了这个反模式。正如上面提到的博客的关系模型，如果已知blog_id查询comments，需要至少执行3次查询，并且手动Join。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">手动Join，麻烦且易出错。文档数据库不支持Join且没有外键保证。因此需要在客户端Join，这样的操作对于软件开发来讲是比较繁琐的。由于没有外键保证，因此不能保证取得的ID在数据库里面是有数据的。在处理的时候需要不断判断，容易出错。</span></li>
<li><span style="line-height: 22px;">多次查询。如果引用过多，查询的时候需要多次查询才能查到足够的数据。本来文档数据库是很快的，但是由于多次查询，给数据库增加了压力，获取全部数据的时间也会增加。</span></li>
<li><span style="line-height: 22px;">事务处理繁琐。文档数据库一般不支持一般意义上事务，只支持行锁。如果文档数据库有给多个连接。在插入的时候，事务的处理就是噩梦。在文档数据库中使用事务，需要使用行锁，在进行大量的处理。太过繁琐，感兴趣的读者可以搜一下。</span></li>
</ol>
<p>解决方案：<br />
适当使用内联数据结构。由于文档数据库支持更复杂的数据结构可以将引用转换为内联的数据，而不用新建一张表。这样做可以解决上面的一些问题，是一个推荐的方案。就像上面博客的例子一样。将五张表简化成了两张表。那什么时候使用内联呢？一般认为</p>
<div>
<ul>
<li><span style="line-height: 19px;">使用内联可以解决读性能问题，明显减少Query的次数的时候。</span></li>
<li><span style="line-height: 19px;">可以简化数据模型，化简表之间的关系，而同时不会影响灵活性的时候。</span></li>
<li><span style="line-height: 19px;">事务可以得到简化为单行事务的时候</span></li>
</ul>
</div>
<div>正确使用的场合：</div>
<p>范式化的使用场景，文档数据库会被多个应用使用。由于数据库设计无法估计多个应用现在及将来的查询情况，需要极大的灵活性。在这个时候，使用引用比内联靠谱。</p>
<h3>反模式三 滥用内联后患无穷</h3>
<p><strong>问题一 妨碍到查询的内联</strong><br />
症状：频繁查询一些内联字段，丢弃其他字段。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">无ID约束：使用内联字段和引用不同，是没有ID约束的。因此不能通过ID(主键)来管理，如果经常需要单独操作内联对象会非常不便。</span></li>
<li><span style="line-height: 22px;">索引泛滥：如果以内联字段为条件进行查询，需要建立索引。有可能造成索引泛滥。</span></li>
<li><span style="line-height: 22px;">性能浪费：大部分文档数据库的实现是按行存储的，也就意味着，尽管只查询一个字段，但是DB需要将整行从磁盘中取出。如果字段够小，文档够大，是很不合算的。</span></li>
</ol>
<p>解决方案：<br />
如果出现以上的症结，就可以考虑使用引用代替内联了。内联特性主要的用途在于提高性能，如果出现性能不升反降，那就没有意义了。如果对性能有很强烈的要求，可以考虑使用重复数据，同样的数据即在内联字段中也在引用的表里面。这样可以结合内联和引用的性能优势。缺点是数据出现重复，维护会比较麻烦。</p>
<p><strong>问题二 无限膨胀的内联</strong><br />
症状：List,Map类型的内联字段不断膨胀，而且没有限制。就像前面提到的Blog的内联字段Comment。如果对每一篇Blog的Comment数量没有限制的话，Comment会无限膨胀。轻则影响性能，重则插入失败。</p>
<table>
<tbody>
<tr>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">Comment[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“…”</td>
<td valign="top" width="160">“NoSQL反模式是好文章”, “是啊”,”无限增长中”…</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">插入失败。文档数据库的每条记录都有最大大小，并且也有推荐最佳的大小。一般不会超过4M。就像刚刚提到的例子，如果是篇热门的博文的话，评论的大小很容易就超过4M。届时文档将无法更新，新的评论无法插入。</span></li>
<li><span style="line-height: 22px;">性能拖油瓶。由于内联字段膨胀，其大小将远远超过其他部分，影响其他部分的性能表现。并且因此导致该记录大小频繁变化，对档数据库的数据文件内部可能因此产生很多碎片。</span></li>
</ol>
<p>解决方案：<br />
设定最大数目或者使用引用。还是Blog和Comment的例子，可以将Comment从Blog中剥离出成一张表。如果考虑到性能，可以在Blog表中新建一个字段如最近的评论。这样既保证了性能，又能够预防膨胀。</p>
<table>
<tbody>
<tr>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">last_five_comment[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“…”</td>
<td valign="top" width="160">“NoSQL反模式是好文章”, “是啊”,”最多5条”…</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p><strong>问题三 无法维护的内联</strong><br />
症状：DBA想单独维护内联字段，但无法做到。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">权限管理难。数据库的权限管理的最小粒度是表。如果使用内联技术，就意味着内联部分必须和其他字段用同一个权限来管理。没有办法在DB级别隐藏。</span></li>
<li><span style="line-height: 22px;">切表难。如果发现一张表的庞大需要切表。这个时候就比较纠结了。如果一刀切，partion Key的选择；索引的失效都会成为问题。如果觉得拆为两张表，就会很好操作的话，就是内联的过度使用了 。</span></li>
<li><span style="line-height: 22px;">备份难。关系数据库中每张表可以有不同的备份策略。但是如果内联起来，这样的备份就做不到了。</span></li>
</ol>
<div><span style="line-height: 22px;">解决办法：</span></div>
<div>设计数据库模型的时候需要考量之后的维护操作，尤其是内联的字段需不需要单独的维护。需要和运维商量。如果对内联的字段有单独维护的要求，可以拆分出来作为引用。</div>
<p><strong>问题四 盯死应用的内联</strong><br />
症状：应用可以非常好的运行在数据库上。但是当新的应用接入的时候会很麻烦。因为设计数据模型的时候考虑到了查询。所以当有新应用，新查询接入的时候，就会难于使用原有的模型。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">新应用接入难。当新的应用试图使用同一个数据库的时候，接入比较困难。因为查询时不同的，需要调整数据模型才能适应。但是调整模型又会影响原有应用。</span></li>
<li><span style="line-height: 22px;">集成难。不同的关系型数据库可以集成在一起，共同使用。但是对于文档数据库，虽然功能上可以互补，但是由于内联数据结构的差异，也比较难于集成。</span></li>
<li><span style="line-height: 22px;">ETL难。现在大部分的数据分析系统使用的是关系模型，就连Hadoop虽然不用关系模型，但是其上的Hive的常用工具也是按关系模型设计的。<br />
</span></li>
</ol>
<p>解决方案：</p>
<p>使用范式设计数据库，即用引用代替内联。或者在使用内联的时候，给每个内联对象一个全局唯一的Key，保证其和关系模型直接可以存在映射关系，这样可以提高数据模型的灵活性。如Blog表：</p>
<div>
<table>
<tbody>
<tr>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">Comment[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“…”</td>
<td valign="top" width="160">[{&#8220;id&#8221;=1,&#8221;content&#8221;=“NoSQL反模式是好文章”}, {&#8220;id&#8221;=2,&#8221;content&#8221;=“是啊”}…]</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
</div>
<div></div>
<div>这样的设计既可以利用到内联的好处，又能将其和关系模型映射起来。确定是需要手动维护comment_id，保证其全局唯一性。</div>
<h3>反模式四：在线计算</h3>
<p>症状：有一些运行时间很长的Query,由于有聚合计算，索引也不能解决。随着数据量的增长，逐渐成为性能瓶颈。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">影响用户体验。在线业务中，如果一个查询大于4s，用户体验会急剧下降。按主键和按索引的查询都能满足要求。但是聚合操作往往需要扫描全表或者大量的数据，随着数据量的增加，查询时间会变长，用户不可容忍。</span></li>
<li><span style="line-height: 22px;">影响数据库性能。长查询的坏处数不清。在线上应用中，如果出现长查询，可能会霸占数据的大部分资源，包括IO，连接，CPU等等。导致其他很好的查询，轻则性能也下降，重者无法使用数据库。长查询可以称之为DB杀手。</span></li>
</ol>
<p>解决方案：<br />
首先要权衡，这个聚合操作是不是必要的，必须实时完成。如果没有必要实时完成的话，可以采取离线操作的方案。在夜深人静的时候，跑一个长查询，将结果缓存起来，给第二天使用。如果必须实时完成，则可以新建一个字段，用“incr”这样的操作，在运行的时候，实时聚合结果。而不是查询的时候执行一次长查询。如果逻辑比较复杂，或者觉得大量“incr”操作给数据库系统带来了压力，可以使用Storm之类的实时数据处理框架。总之，要慎用长查询。</p>
<h3>反模式五：把内联Map对象的Key当作ID用</h3>
<p>症状：文档数据库支持内联Map类型。将其中Map的Key当作数据库的主键来用。</p>
<table>
<tbody>
<tr>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">Comment{}</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“…”</td>
<td valign="top" width="160">{&#8220;1&#8243;=“NoSQL反模式是好文章”, &#8220;2&#8221;=“是啊”}</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p>这个反模式很容易犯，因为在编程语言中Map数据结构就是这么用的。但是对于数据库模型来说，这是不折不扣的反模式。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">无法通过数据库做各种(&gt;&lt;=)查询。对于关系型数据库来说，虽然数据结构可以很灵活，但查询的时候都是按层次的。比如comment.id，comment.content。也就是说其Map类型中的Key可以理解为属性名的，而不是用作ID。因此一旦这样使用，就脱离的数据库管制，无法使用各种查询功能。</span></li>
<li><span style="line-height: 22px;">无法通过索引查询。文档数据可建立索引是需要列名的。比如comment.id。而这样的数据结构没有固定的列名，因此无法建立索引。</span></li>
</ol>
<p>解决方案：<br />
使用数组+Map来解决。如：</p>
<div>
<table>
<tbody>
<tr>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">Comment[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“…”</td>
<td valign="top" width="160">[{&#8220;id&#8221;=1,&#8221;content&#8221;=“NoSQL反模式是好文章”}, {&#8220;id&#8221;=2,&#8221;content&#8221;=“是啊”}…]</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
</div>
<div></div>
<div>这样，就可以使用comment.id作为索引，也可以使用数据库的查询功能。简单有效。Map类型中的Key是属性名，Value是属性值。这样的用法是文档数据库数据模型的本意，因此其提供的各种功能才能利用上。否则就无法使用。</div>
<h3>反模式六：不合理的ID</h3>
<p>症状：使用String甚至更复杂数据结构作为的ID，或者全部使用数据库提供的自生成ID。如：</p>
<div>
<table>
<tbody>
<tr>
<td valign="top" width="160">id(该ID系系统自生成）</td>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">0</td>
<td valign="top" width="160">&#8230;</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
</div>
<p>坏处:</p>
<ol>
<li><span style="line-height: 22px;">ID混乱。如果使用数据库提供的自生成ID，同时表中还有一个类似有主键含义的Blog_id，这样很不好，容易造成逻辑混乱。由于文档数据库不支持ID的重命名，习惯关系数据库做法的人可能会再建立一个自己的逻辑ID字段。这是没有必要的。</span></li>
<li><span style="line-height: 22px;">索引庞大，性能低下。ID是数据库的非常重要的部分。ID的长度将决定索引(包括主键的索引)的大小，直接影响到数据库性能。如果索引比内存小，性能会很好。但一旦索引大小超过内存，出现数据交换，性能会急剧下降。一个Long占8字节，一个20个字符的UTF8 String占用约60个字节。相差10倍之巨，不能不考虑。</span></li>
</ol>
<p>解决方案：<br />
尽量使用有一定意义的字段做ID，并且不在其他字段中重复出现。不使用复杂的数据类型做ID，只使用int,long或者系统提供的主键类型做ID。</p>
<h3>文档数据库的反模式总结</h3>
<p>阐述了这么多的反模式，下面有个一览表，涵盖了上面所有的反模式。这个一览表，是按照文档数据库模型建立的。是个文档数据库模型的例子。</p>
<table>
<tbody>
<tr>
<td>ID</td>
<td>反模式名</td>
<td>问题</td>
</tr>
<tr>
<td valign="top" width="55">0</td>
<td valign="top" width="108">存在描述多对多的关系表</td>
<td valign="top" width="601">[{ID：00<br />
症状：文档数据库中存储在有纯粹的关系表<br />
坏处：[破坏数据完备性，索引过多]<br />
解决方案：加入一个List字段<br />
},{<br />
ID：01<br />
症状：关系模型不区分“一对多”和“多对一”<br />
坏处：额外索引<br />
解决方案：合理的安排字段的位置<br />
}]</td>
</tr>
<tr>
<td valign="top" width="55">1</td>
<td valign="top" width="108">处处引用客户端Join</td>
<td valign="top" width="601">[{<br />
ID：10<br />
症状：查询的时候需要大量的手动Join操作<br />
坏处：[手动Join，多次查询, 事务处理繁琐]<br />
解决方案：适当使用内联数据结构。<br />
}]</td>
</tr>
<tr>
<td valign="top" width="55">2</td>
<td valign="top" width="108">滥用内联后患无穷</td>
<td valign="top" width="601">[{<br />
ID：20<br />
症状：频繁查询一些内联字段，丢弃其他字段<br />
坏处：[无ID约束，索引泛滥, 性能浪费]<br />
解决方案：使用引用代替内联了,允许重复数据<br />
},{<br />
ID：21<br />
症状：List,Map类型的内联字段不断膨胀，而且没有限制<br />
坏处：[插入失败, 性能拖油瓶]<br />
解决方案：设定最大数目或者使用引用。<br />
},{<br />
ID：22<br />
症状：DBA想单独维护内联字段，但无法做到<br />
坏处：[权限管理难, 切表难, 备份难]<br />
解决方案：设计数据库模型的时候需要考量之后的维护操作<br />
},{<br />
ID：23<br />
症状：应用可以非常好的运行在数据库上。但是当新的应用接入的时候会很麻烦。内联盯死了应用<br />
坏处：[新应用接入难, 集成难, ETL难]<br />
解决方案：使用范式设计数据库，即用引用代替内联。保证其和关系模型直接可以存在映射关系<br />
}]</td>
</tr>
<tr>
<td valign="top" width="55">3</td>
<td valign="top" width="108">在线计算</td>
<td valign="top" width="601">[{<br />
ID：30<br />
症状：有一些运行时间很长的Query, 逐渐成为性能瓶颈。<br />
坏处：[影响用户体验，影响数据库性能]<br />
解决方案：取消不必要的聚合操作. 运行的时候，实时聚合结果.使用第三方实时或非实时工具。如Hadoop，Storm.<br />
}]</td>
</tr>
<tr>
<td valign="top" width="55">4</td>
<td valign="top" width="108">把内联Map对象的Key当作ID用</td>
<td valign="top" width="601">[{<br />
ID：40<br />
症状：文档数据库支持内联Map类型。将其中Map的Key当作数据库的主键来用。<br />
坏处：[无法通过数据库做各种(&gt;&lt;&#8220;&#8221;&#8221; =)查询，无法通过索引查询]<br />
解决方案：使用数组+Map来解决。<br />
}]</td>
</tr>
<tr>
<td valign="top" width="55">5</td>
<td valign="top" width="108">不合理的ID</td>
<td valign="top" width="601">[{<br />
ID：50<br />
症状：用String甚至更复杂数据结构作为的ID，或者全部使用数据库提供的自生成ID。<br />
坏处：[ID混乱，索引庞大]<br />
解决方案：尽量使用有一定意义的字段做ID。不使用复杂的数据类型做ID。<br />
}]</td>
</tr>
</tbody>
</table>
<p>本文试图总结了笔者知道的重要的文档数据库的反模式。现在关于NoSQL数据模型设计模式的讨论才刚刚起步，将来也许会逐渐自成体系。对于列数据库和Key-Value的反模式，笔者等到有了足够积累的时候，再和大家分享。</p>
<div></div>
<p><a rel="nofollow" href="./../../../nosql-anti-pattern-document/index.html">NoSQL反模式 &#8211; 文档数据库篇</a>最先出现在<a rel="nofollow" href="./../../../index.html">我自然</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../nosql-anti-pattern-document/feed/index.html</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
		<item>
		<title>NoSQL数据库笔谈v0.2</title>
		<link>./../../../nosql%e6%95%b0%e6%8d%ae%e5%ba%93%e7%ac%94%e8%b0%88v0-2/index.html</link>
					<comments>./../../../nosql%e6%95%b0%e6%8d%ae%e5%ba%93%e7%ac%94%e8%b0%88v0-2/index.html#comments</comments>
		
		<dc:creator><![CDATA[yankay]]></dc:creator>
		<pubDate>Wed, 24 Feb 2010 13:29:12 +0000</pubDate>
				<category><![CDATA[软件技术]]></category>
		<category><![CDATA[NoSQL]]></category>
		<guid isPermaLink="false">http://www.yankay.com/?p=25685</guid>

					<description><![CDATA[<p>日前国内没有一套比较完整的NoSQL数据库资料，有很多先驱整理发表了很多，但不是很系统。不材尝试着将各家的资料 [&#8230;]</p>
<p><a rel="nofollow" href="./../../../nosql%e6%95%b0%e6%8d%ae%e5%ba%93%e7%ac%94%e8%b0%88v0-2/index.html">NoSQL数据库笔谈v0.2</a>最先出现在<a rel="nofollow" href="./../../../index.html">我自然</a>。</p>
]]></description>
										<content:encoded><![CDATA[<p>日前国内没有一套比较完整的NoSQL数据库资料，有很多先驱整理发表了很多，但不是很系统。不材尝试着将各家的资料整合一下，并书写了一些自己的见解。<br />
本书写了一些目前的NoSql的一些主要技术，算法和思想。同时列举了大量的现有的数据库实例。读完全篇，相信读者会对NoSQL数据库了解个大概。<br />
另外我还准备开发一个开源内存数据库galaxydb.本书也是为这个数据库提供一些架构资料。</p>
<p>由于时间紧迫，加班加点，V0.2版本提前赶制了出来。</p>
<p><a href="http://47.100.65.109/wp-content/uploads/2012/01/NoSQL_database_note.pdf">PDF版</a></p>
<p>目录</p>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_3648342117667198_092538481578" target="_self" rel="noopener">序</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_6151155580979304_025368058842" target="_self" rel="noopener">思想篇</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#CAP_7730791447684169_231516710" target="_self" rel="noopener">CAP</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_8927957601845264_891876230947" target="_self" rel="noopener">最终一致性</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_688371617347002_0840630698949" target="_self" rel="noopener">变体</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#BASE_9958890723064542_78222997_869969945038222" target="_self" rel="noopener">BASE</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_40717189376329843_06651605852" target="_self" rel="noopener">其他</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#I_O_9886723485627446_373115905_5228612841633498" target="_self" rel="noopener">I/O的五分钟法则</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_8314717379700977_930601348298" target="_self" rel="noopener">不要删除数据</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#RAM_147097721381792_7902793153_006425076106569838" target="_self" rel="noopener">RAM是硬盘,硬盘是磁带</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Amdahl_Gustafson_9052423372139" target="_self" rel="noopener">Amdahl定律和Gustafson定律</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_5841810574932209" target="_self" rel="noopener">万兆以太网</a></li>
</ol>
</li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_7991344137117267_675089238211_7007085816130685" target="_self" rel="noopener">手段篇</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_777160631492734_5802160603925" target="_self" rel="noopener">一致性哈希</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_735276508313792_2270315258144_9783657311654288" target="_self" rel="noopener">亚马逊的现状</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_6454406003627595_776185765138" target="_self" rel="noopener">算法的选择</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#NRW_012323816604251636_2127662_10272764961707637" target="_self" rel="noopener">Quorum NRW</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Vector_clock_41690548602491617_5257623065741377" target="_self" rel="noopener">Vector clock</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Virtual_node_6496471269056201_" target="_self" rel="noopener">Virtual node</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#gossip_34187653195112944_16061_08507828080528557" target="_self" rel="noopener">gossip</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Gossip_State_Transfer_Model_14_5181318348909955" target="_self" rel="noopener">Gossip (State Transfer Model)</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Gossip_Operation_Transfer_Mode_688725990810297" target="_self" rel="noopener">Gossip (Operation Transfer Model)</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Merkle_tree_26526400726288557__5335256577035526" target="_self" rel="noopener">Merkle tree</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Paxos_9032379315516326_7248578" target="_self" rel="noopener">Paxos</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_08464202471077442_91161458194" target="_self" rel="noopener">背景</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_DHT_1358780225498577_43241378_3858325568533115" target="_self" rel="noopener">DHT</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Map_Reduce_Execution_846077151" target="_self" rel="noopener">Map Reduce Execution</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Handling_Deletes_5351970902357" target="_self" rel="noopener">Handling Deletes</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_9441494032710129_695390093706" target="_self" rel="noopener">存储实现</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_6926584525683441_048149148503_6730095064772663" target="_self" rel="noopener">节点变化</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_6616530869432342_668499063771_40951742786596446" target="_self" rel="noopener">列存</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_9307460655327144_814779051211_16340782010495503" target="_self" rel="noopener">描述</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_0735241653420401_214353696530_10910972604729818" target="_self" rel="noopener">特点</a></li>
</ol>
</li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_023765667772280286_6105495251" target="_self" rel="noopener">软件篇</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_22756486493872252_88319420976" target="_self" rel="noopener">亚数据库</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#MemCached_4727136253125943_099_19137860612924817" target="_self" rel="noopener">MemCached</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_5715430571410516_795932562480_594496466269948" target="_self" rel="noopener">特点</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_30675244504305366_58003565301_10183704247790026" target="_self" rel="noopener">内存分配</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_25401546959033316_54044164260_21550351004030177" target="_self" rel="noopener">缓存策略</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_9681760638005524_476574154195_29919331639865443" target="_self" rel="noopener">缓存数据库查询</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_24413638147967254_17374089581" target="_self" rel="noopener">数据冗余与故障预防</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Memcached_mc_4754505836919398_" target="_self" rel="noopener">Memcached客户端（mc）</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_Web_06299667034235767_0770205" target="_self" rel="noopener">缓存式的Web应用程序架构</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_2923975010491904_991216856614_6695281938071784" target="_self" rel="noopener">性能测试</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#dbcached_24141833575267735_558" target="_self" rel="noopener">dbcached</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Memcached_dbcached_80228012544_7159779747569146" target="_self" rel="noopener">Memcached 和 dbcached 在功能上一样吗?</a></li>
</ol>
</li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_12254020875723726_93237325335" target="_self" rel="noopener">列存系列</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Hadoop_Hbase_7008211932696602_" target="_self" rel="noopener">Hadoop之Hbase</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_HadoopDB_694108467096603_8508" target="_self" rel="noopener">耶鲁大学之HadoopDB</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#GreenPlum_9589918625911178_389_2571204937078031" target="_self" rel="noopener">GreenPlum</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#FaceBook_Cassandra_67775802042_5854484279820851" target="_self" rel="noopener">FaceBook之Cassandra</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Cassandra_7570848905089025_855" target="_self" rel="noopener">Cassandra特点</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Keyspace_4281837751378973_7779" target="_self" rel="noopener">Keyspace</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Column_family_CF_7300188887469" target="_self" rel="noopener">Column family（CF）</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Key_8652924433729429_945524073" target="_self" rel="noopener">Key</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Column_7210506089658316_137983" target="_self" rel="noopener">Column</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Super_column_7509394918740693__5465405669459864" target="_self" rel="noopener">Super column</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Sorting_02237180483759471_3623" target="_self" rel="noopener">Sorting</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_9140782690107976_782512314168_5668600168551156" target="_self" rel="noopener">存储</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#API_26318602548081826_11761206" target="_self" rel="noopener">API</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Google_BigTable_89699097442012_4732490241509013" target="_self" rel="noopener">Google之BigTable</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Yahoo_PNUTS_8920611285743113_6" target="_self" rel="noopener">Yahoo之PNUTS</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_277640536666413_1438417866912_5870416136781664" target="_self" rel="noopener">特点</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#PNUTS_5128583965993961_2354956" target="_self" rel="noopener">PNUTS实现</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Record_level_mastering_5517762_46835816908332717" target="_self" rel="noopener">Record-level mastering 记录级别主节点</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#PNUTS_8107177845815062_9043074_09676675858475725" target="_self" rel="noopener">PNUTS的结构</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Tablets_42011614117692475_6287_8740690747386985" target="_self" rel="noopener">Tablets寻址与切分</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Write_09715737083689369_039670_4594814468066295" target="_self" rel="noopener">Write调用示意图</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#PNUTS_232566011293608_85456655" target="_self" rel="noopener">PNUTS感悟</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_SQL_014314330249305951_274686" target="_self" rel="noopener">微软之SQL数据服务</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_5549467765717498_055917970185" target="_self" rel="noopener">非云服务竞争者</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Document_Store_448677452585955" target="_self" rel="noopener">文档存储</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#CouchDB_1114163929904669_32220" target="_self" rel="noopener">CouchDB</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#id3_7125310846245526_994698240_046846452482873" target="_self" rel="noopener">特性</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Riak_22101400413903483_0979197" target="_self" rel="noopener">Riak</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#MongoDB_6119060613540953_36142" target="_self" rel="noopener">MongoDB</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Terrastore_9954661491866293_58" target="_self" rel="noopener">Terrastore</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#ThruDB_380390167243812_4644251" target="_self" rel="noopener">ThruDB</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Key_Value_Tuple_Store_89361288" target="_self" rel="noopener">Key Value / Tuple 存储</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Amazon_SimpleDB_52017362120027_8392263913000672" target="_self" rel="noopener">Amazon之SimpleDB</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Chordless_5471036441883179_507" target="_self" rel="noopener">Chordless</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Redis_5387336107639441_6223163" target="_self" rel="noopener">Redis</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Scalaris_7621760337337995_5287" target="_self" rel="noopener">Scalaris</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Tokyo_cabinet_Tyrant_545688958_7406684038893259" target="_self" rel="noopener">Tokyo cabinet / Tyrant</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#CT_M_9097645017290603_52052040" target="_self" rel="noopener">CT.M</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Scalien_704454814757133_326936" target="_self" rel="noopener">Scalien</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Berkley_DB_9606079710191457_91" target="_self" rel="noopener">Berkley DB</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#MemcacheDB_06512137876498592_4" target="_self" rel="noopener">MemcacheDB</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Mnesia_9154183157888259_898783" target="_self" rel="noopener">Mnesia</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#LightCloud_823765875537818_453" target="_self" rel="noopener">LightCloud</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#HamsterDB_05420895958151517_68" target="_self" rel="noopener">HamsterDB</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Flare_8050426165277293_5400566_5744763652908157" target="_self" rel="noopener">Flare</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Eventually_Consistent_Key_Valu" target="_self" rel="noopener">最终一致性Key Value存储</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_Amazon_Dynamo_520203814357290" target="_self" rel="noopener">Amazon之Dynamo</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_5504176676028282_249060984314_6205024527039867" target="_self" rel="noopener">功能特色</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_3991007534787059_800100618042" target="_self" rel="noopener">架构特色</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#BeansDB_46725810039788485_1444_6422195057201686" target="_self" rel="noopener">BeansDB</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_855878707383143_0006899688354_7439637158723382" target="_self" rel="noopener">简介</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_8856209489372642_306660973986_09293410042228067" target="_self" rel="noopener">更新</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_5668651611345044_858602237877_6976689272639188" target="_self" rel="noopener">特性</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_25480733904987574_39869615321" target="_self" rel="noopener">性能</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Nuclear_5671010203671387_94607_5087654534821493" target="_self" rel="noopener">Nuclear</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_Tips_7329128378643512_0444030_21084614206097596" target="_self" rel="noopener">两个设计上的Tips</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Voldemort_09926958376271466_23_3723235398029888" target="_self" rel="noopener">Voldemort</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Dynomite_9324181654488122_3155" target="_self" rel="noopener">Dynomite</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Kai_8461184647175368_911329902" target="_self" rel="noopener">Kai</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Object_Databases_8488295138588" target="_self" rel="noopener">未分类</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Skynet_9220649347100478_689227" target="_self" rel="noopener">Skynet</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Drizzle_9847466828815841_11171_39190645551632586" target="_self" rel="noopener">Drizzle</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_9596271403133869_245301471091_30492524683708877" target="_self" rel="noopener">比较</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_10969047341495752_68719353526" target="_self" rel="noopener">可扩展性</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_587794222868979_1359147783368_00199023178757618" target="_self" rel="noopener">数据和查询模型</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_23622012604027987_99347529746_4971976801014726" target="_self" rel="noopener">持久化设计</a></li>
</ol>
</li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_6041983840987086_405110552906" target="_self" rel="noopener">应用篇</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#eBay_7439944222569466_24644076_7816704294788374" target="_self" rel="noopener">eBay 架构经验</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_7241636626422405_709893183782_6238797470731577" target="_self" rel="noopener">淘宝架构经验</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_Flickr_11598328692846749_1352" target="_self" rel="noopener">Flickr架构经验</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Twitter_9210753435831028_97021_8836312611977271" target="_self" rel="noopener">Twitter运维经验</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_6155514829537361_554680225560" target="_self" rel="noopener">运维经验</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_Metrics_44020236287486847_696" target="_self" rel="noopener">Metrics</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_6825445668030796_760233095682" target="_self" rel="noopener">配置管理</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Darkmode_5259184612638798_9242_24315166669659272" target="_self" rel="noopener">Darkmode</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_15026388981903727_49114302769" target="_self" rel="noopener">进程管理</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_0638721247682108_828753285625" target="_self" rel="noopener">硬件</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_20228313746363413_71546543696" target="_self" rel="noopener">代码协同经验</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_Review_2868290775437222_09924_496206508469592" target="_self" rel="noopener">Review制度</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_9450378125913654_306697729191" target="_self" rel="noopener">部署管理</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_9827601284285629_932863057418_1654637779888143" target="_self" rel="noopener">团队沟通</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#Cache_7188110122840438_8250995" target="_self" rel="noopener">Cache</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_7156457947548296_394763811409" target="_self" rel="noopener">云计算架构</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_6254229054692272_031210319731" target="_self" rel="noopener">反模式</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#1_Single_Point_of_Failure_0747" target="_self" rel="noopener">单点失败（Single Point of Failure）</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#2_4706029240041971_38065281044" target="_self" rel="noopener">同步调用</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#3_2901653153821826_08160938974" target="_self" rel="noopener">不具备回滚能力</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#4_6656234869733453_99668187927" target="_self" rel="noopener">不记录日志</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#6_27202645502984524_3263167534" target="_self" rel="noopener">无切分的数据库</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#7_1922687441110611_96343139093" target="_self" rel="noopener">无切分的应用</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#8_03636558633297682_8496042666" target="_self" rel="noopener">将伸缩性依赖于第三方厂商</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#OLAP_9558059629367476_3836398019139299" target="_self" rel="noopener">OLAP</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#OLAP_4599690049262246" target="_self" rel="noopener">OLAP报表产品最大的难点在哪里？</a></li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#NOSQL__09502721972778405" target="_self" rel="noopener">NOSQL们背后的共有原则</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_8299268803807944" target="_self" rel="noopener">假设失效是必然发生的</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_3399782225793654" target="_self" rel="noopener">对数据进行分区</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_6817497787365963" target="_self" rel="noopener">保存同一数据的多个副本</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_41232823879475633" target="_self" rel="noopener">动态伸缩</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_4374214008737275" target="_self" rel="noopener">查询支持</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_Map_Reduce__0618697512503632" target="_self" rel="noopener">使用 Map/Reduce 处理汇聚</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_7409241799750766" target="_self" rel="noopener">基于磁盘的和内存中的实现</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_147455643042405" target="_self" rel="noopener">仅仅是炒作?</a></li>
</ol>
</li>
</ol>
</li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_6712483493611217_093368983827" target="_self" rel="noopener">附</a>
<ol>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_2173698448339071_054548149739" target="_self" rel="noopener">感谢</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_6935117091385137_745914644052_9642310538889594" target="_self" rel="noopener">版本志</a></li>
<li><a href="http://www.yankay.com/wp-content/NoSql_Database_Note.html#_4067787453532219_249561086297_6469049028134853" target="_self" rel="noopener">引用</a></li>
</ol>
</li>
</ol>
<div id="WritelyTableOfContents"></div>
<p><a rel="nofollow" href="./../../../nosql%e6%95%b0%e6%8d%ae%e5%ba%93%e7%ac%94%e8%b0%88v0-2/index.html">NoSQL数据库笔谈v0.2</a>最先出现在<a rel="nofollow" href="./../../../index.html">我自然</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../nosql%e6%95%b0%e6%8d%ae%e5%ba%93%e7%ac%94%e8%b0%88v0-2/feed/index.html</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
	</channel>
</rss>
