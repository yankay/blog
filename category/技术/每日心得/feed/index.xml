<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>每日心得 &#8211; 我自然</title>
	<atom:link href="./../../../%E6%8A%80%E6%9C%AF/%E6%AF%8F%E6%97%A5%E5%BF%83%E5%BE%97/feed/index.html" rel="self" type="application/rss+xml" />
	<link>./../../../../index.html</link>
	<description>颜开的博客</description>
	<lastBuildDate>Sun, 28 Mar 2021 12:06:56 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>

<image>
	<url>./../../../../wp-content/uploads/2021/03/cropped-favicon-32x32.png</url>
	<title>每日心得 &#8211; 我自然</title>
	<link>./../../../../index.html</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Scala Tour &#8211; 精选</title>
		<link>./../../../../scala-tour-choiceness/index.html</link>
					<comments>./../../../../scala-tour-choiceness/index.html#comments</comments>
		
		<dc:creator><![CDATA[yankay]]></dc:creator>
		<pubDate>Wed, 01 May 2013 18:55:26 +0000</pubDate>
				<category><![CDATA[每日心得]]></category>
		<category><![CDATA[软件技术]]></category>
		<category><![CDATA[Scala]]></category>
		<guid isPermaLink="false">http://www.yankay.com/?p=27005</guid>

					<description><![CDATA[<p>5月1日是劳动的日子，笔者做了一个学习Scala精彩特性的网站<a title="scala-tour" href="http://zh.scala-tour.com/" target="_blank" rel="noopener">Scala-Tour</a>。</p>
<p><a rel="nofollow" href="./../../../../scala-tour-choiceness/index.html">Scala Tour &#8211; 精选</a>最先出现在<a rel="nofollow" href="./../../../../index.html">我自然</a>。</p>
]]></description>
										<content:encoded><![CDATA[<p>5月1日是劳动的日子，笔者做了一个学习Scala精彩特性的网站<a title="scala-tour" href="http://zh.scala-tour.com/" target="_blank" rel="noopener">Scala-Tour</a>。在学习Scala是时候，遇到很多令人激动的特性，主要函数式编程和并发。相比下Java已经老态龙钟，步履躇跚。或许Scala不会成为替代Java语言，但的确给后来者设立了标杆。所以做了这个网站，顺着一个一个例子，由浅入深，由表及里。逐渐学会Scala,尽管不会因此成为一个熟练Scala的开发者，但是对函数式编程的也会相当了然。这篇文章精选了Scala-Tour上了一些章节，想快速了解的朋友可以看看这篇文章，当然想详细看就上上<a title="scala-tour" href="http://zh.scala-tour.com/" target="_blank" rel="noopener">Scala-Tour</a>吧。<br />
<img decoding="async" class="alignnone size-medium wp-image-27241" src="http://47.100.65.109/wp-content/uploads/2013/05/scala-300x137.png" alt="" width="300" height="137" srcset="./../../../../wp-content/uploads/2013/05/scala-300x137.png 300w, ./../../../../wp-content/uploads/2013/05/scala.png 332w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<h3>不再需要Close</h3>
<p>在Java里面，使用完资源(文件句柄，数据库连接)等之后，必须手动Close。否则发生泄漏后，程序只有被迫重启。Scala可以通过函数式实现自动close。</p>
<pre lang="scala">import scala.reflect.io.File
import java.util.Scanner

def withScanner(f: File, op: Scanner =&gt; Unit) = {
    val scanner = new Scanner(f.bufferedReader)
    try {
        op(scanner)
    } finally {
        scanner.close()
    }
}

withScanner(File("/proc/self/stat"),
    scanner =&gt; println("pid is " + scanner.next()))</pre>
<p>这个例子是从/proc/self/stat文件中读取当前进程的pid。withScanner封装了try-finally块，所以调用者不用再close。</p>
<h3>按名称传递参数</h3>
<p>我们熟悉的参数传递方式是按值传递。按名称传递的方式，可以理解为直接传递参数名字，等到实际调用的时候，再去取值。在Java代码中，往往充斥着if(log.isDebug()){log.debug(&#8230;)}这样语句。之前的if调用是很有必要的，因为在之后的debug语句中往往有字符串拼接的操作。在不需要打Log的时候，字符串拼接也有可能发生异常抛出。而Scala可以通过按名称传递解决这个问题，这样就不再需要if(log.isDebug())这样的语句了。</p>
<pre lang="scala">val logEnable = false

def log(msg: =&gt; String) =
    if (logEnable) println(msg)

val MSG = "programing is running"

log(MSG + 1 / 0)</pre>
<h3>鸭子类型</h3>
<p>“走起来像鸭子，叫起来像鸭子，就是鸭子。”这个例子中使用{ def close(): Unit }作为参数类型。因此任何含有close()的函数的类都可以作为参数。这样的做法比使用接口要好很多，因为可以不引入任何依赖。这个withClose方法单独编译，随处使用。</p>
<pre lang="scala">def withClose(closeAble: { def close(): Unit }, op: { def close(): Unit } =&gt; Unit) {
    try {
        op(closeAble)
    } finally {
        closeAble.close()
    }
}

class Connection {
    def close() = println("close Connection")
}

val conn: Connection = new Connection()
withClose(conn, conn =&gt;
    println("do something with Connection"))</pre>
<h3>Trait</h3>
<p>Traits就像是有函数体的Interface，使用with关键字来混入。单个Traits就像是一块乐高积木，一个插件。就像下面的JsonAble，当使用一个对象的时候，可以随时随地把它插在他上面。这个对接就具备了toJson的能力。不用创建一个类，或者写组合的代码，非常干脆。这样也可以使代码有很高的正交性。不再会为了一个很小的需求，去修改一个被广泛使用的类。</p>
<pre lang="scala">trait ForEachAble[A] {
  def iterator: java.util.Iterator[A]
  def foreach(f: A =&gt; Unit) = {
    val iter = iterator
    while (iter.hasNext)
      f(iter.next)
  }
}

trait JsonAble {
  def toJson() =
    scala.util.parsing.json.JSONFormat.defaultFormatter(this)
}

val list = new java.util.ArrayList[Int]() with ForEachAble[Int] 
list.add(1); list.add(2)

println("For each: "); list.foreach(x =&gt; println(x))
//println("Json: " + list.toJson())</pre>
<h3>函数式真正的威力</h3>
<p>通过将函数作为参数，可以使程序极为简洁。 函数式除了能简化代码外，更重要的是他关注的是Input和Output，函数本身没有副作用。 就是Unix pipeline一样，简单的命令可以组合在一起。 List的filter方法接受一个过滤函数，返回一个新的List 如果你喜欢Unix pipeline的方式，你一定也会喜欢函数式编程。 这个例子是用函数式的代码模拟“cat file | grep &#8216;warn&#8217; | grep &#8216;2013&#8217; | wc”的行为。相比于Ruby等动态语言,这威力来自于科学而不是魔法</p>
<pre lang="scala">val file = List("warn 2013 msg", "warn 2012 msg", "error 2013 msg", "warn 2013 msg")

println("cat file | grep 'warn' | grep '2013' | wc : " 
    + file.filter(_.contains("warn")).filter(_.contains("2013")).size)</pre>
<h3>再见 NullException</h3>
<p>每个Java程序员都被NullException折磨过。因为Java中每个对象都可能为Null,所以要么到处检查null的问题，要么到处try/cache。<br />
Scala提供了Option机制来解决，代码中不断检查null的问题。这个例子包装了getProperty方法，使其返回一个Option。 这样就可以不再漫无目的地null检查。只要Option类型的值即可。使用pattern match来检查是常见做法。也可以使用getOrElse来提供当为None时的默认值。给力的是Option还可以看作是最大长度为1的List，List的强大功能都可以使用。<br />
不是每个对象都可以为Null了，只有Option可以为None。这样的做法显示区分了可能为Null的情况，可以和NullException说再见了。</p>
<pre lang="scala">def getProperty(name: String): Option[String] = {
  val value = System.getProperty(name)
  if (value != null) Some(value) else None
}

val osName = getProperty("os.name")

osName match {
  case Some(value) =&gt; println(value)
  case _ =&gt; println("none")
}

println(osName.getOrElse("none"))

osName.foreach(print _)</pre>
<h3>并行集合</h3>
<p>这个例子是访问若干URL。但确可以并行访问，比非并行的做法可以快一倍。要想让访问并行，只要调用List.par就可以了。</p>
<pre lang="scala">val urls = List("http://scala-lang.org/",
  "https://github.com/yankay/scala-tour")

def fromURL(url: String) = scala.io.Source.fromURL(url)
  .getLines().mkString("\n")

val t = System.currentTimeMillis()
urls.par.map(fromURL(_))
println("time: " + (System.currentTimeMillis - t) + "ms")</pre>
<p>是不是非常的简单？并行集合支持大部分集合的功能。不增加程序复杂性，却能大幅提高并发的能力。</p>
<h3>远程Actor</h3>
<p>Actor是并发模型，也使用于分布式。这个例子创建一个时间服务器，通过alive来监听TCP端口，register来注册自己。调用时通过select创建client。其余使用方式和普通Actor一样。<br />
将单机并发和分布式抽象成一种模型。简化了程序复杂性。虽然多核编程并不广泛，但调用外部接口的情况越来越多。Actor模型非常适用于这样的异步环境。</p>
<pre lang="scala">import scala.actors.remote.RemoteActor._
import scala.actors.Actor._
import scala.actors.remote.Node

val port = 31241

val echoServer = actor {
  alive(port)
  register('echoServer, self)
  loop {
    react {
      case msg =&gt; {
        reply("replay " + msg)
      }
    }
  }
}

val timeServerClient = select(Node("127.0.0.1", port), 'echoServer)

timeServerClient !? "hi" match {
  case replay: String =&gt; println(replay)
}</pre>
<h3>抽取器</h3>
<p>抽取器可以进行解构。这个例子是构建一个Email抽取器，只要实现unapply函数就可以了。<br />
Scala的正则表达式会自带抽取器，可以抽取出一个List。List里的元素是匹配()里的表达式。<br />
抽取器很有用，短短的例子里就有两处使用抽取器：</p>
<ul>
<li>通过 case user :: do main :: Nil 来解构List</li>
<li>通过 case Email(user, domain) 来解构Email。</li>
</ul>
<pre lang="scala">import scala.util.matching.Regex

object Email {
  def unapply(str: String) = new Regex("""(.*)@(.*)""")
    .unapplySeq(str).get match {
    case user :: domain :: Nil =&gt; Some(user, domain)
    case _ =&gt; None
  }
}

"user@domain.com" match {
  case Email(user, domain) =&gt; println(user + "@" + domain)
}</pre>
<h3>DSL</h3>
<p>DSL是Scala最强大武器，可以使一些描述性代码变得极为简单。这个例子是使用DSL生成JSON。Scala很多看似是语言级的特性也是用DSL做到的。<br />
自己编写DSL有点复杂，但使用起来非常方便。这样可以使Scala可以嵌入XML，嵌入Json，嵌入SQL。而其他语言中这些都只是字符串而已。</p>
<pre lang="scala">import org.json4s._
import org.json4s.JsonDSL._
import org.json4s.jackson.JsonMethods._
import java.util.Date

case class Twitter(id: Long, text: String, publishedAt: Option[java.util.Date])

var twitters = Twitter(1, "hello scala", Some(new Date())) ::
  Twitter(2, "I like scala tour", None) :: Nil

var json = ("twitters"
  -&gt; twitters.map(
    t =&gt; ("id" -&gt; t.id)
      ~ ("text" -&gt; t.text)
      ~ ("published_at" -&gt; t.publishedAt.toString())))

println(pretty(render(json)))</pre>
<h3>Simple Build Tool</h3>
<p>SBT是Scala的最佳编译工具，在他的帮助下，你甚至不需要安装除JRE外的任何东西，来开发Scala。<br />
例如你想在自己的机器上执行<a title="scala-tour" href="http://zh.scala-tour.com/" target="_blank" rel="noopener">Scala-Tour</a>,可以执行下面的命令</p>
<pre lang="bash">#Linux/Mac(compile &amp; run):
git clone https://github.com/yankay/scala-tour-zh.git
cd scala-tour-zh
./sbt/sbt stage
./target/start

#Windows(can only compile):
git clone https://github.com/yankay/scala-tour-zh.git
cd scala-tour-zh
sbt\sbt stage</pre>
<h3>结语</h3>
<p>这几个例子精选自<a title="scala-tour" href="http://zh.scala-tour.com/" target="_blank" rel="noopener">Scala-Tour</a>，这个网站中还有介绍了很多其他好的特性，比如模式匹配和隐式转换，就不逐一介绍了。这个项目Host在<a title="GitHub" href="https://github.com/yankay/scala-tour/">GitHub</a>上，如果你也有精彩的用法的话，大家交流交流吧。</p>
<p><a rel="nofollow" href="./../../../../scala-tour-choiceness/index.html">Scala Tour &#8211; 精选</a>最先出现在<a rel="nofollow" href="./../../../../index.html">我自然</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../../scala-tour-choiceness/feed/index.html</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
		<item>
		<title>NoSQL反模式 &#8211; 文档数据库篇</title>
		<link>./../../../../nosql-anti-pattern-document/index.html</link>
					<comments>./../../../../nosql-anti-pattern-document/index.html#comments</comments>
		
		<dc:creator><![CDATA[yankay]]></dc:creator>
		<pubDate>Fri, 25 Jan 2013 13:03:37 +0000</pubDate>
				<category><![CDATA[每日心得]]></category>
		<category><![CDATA[NoSQL]]></category>
		<category><![CDATA[反模式]]></category>
		<category><![CDATA[文档数据库]]></category>
		<guid isPermaLink="false">http://www.yankay.com/?p=26652</guid>

					<description><![CDATA[<p>我们设计关系数据库Schema的都有一套完整的方案，而NoSQL却没有这些。半年前笔者读了本《SQL反模式》的书，觉得非常好。就开始留意，对于NoSQL是否也有反模式？</p>
<p><a rel="nofollow" href="./../../../../nosql-anti-pattern-document/index.html">NoSQL反模式 &#8211; 文档数据库篇</a>最先出现在<a rel="nofollow" href="./../../../../index.html">我自然</a>。</p>
]]></description>
										<content:encoded><![CDATA[<p>我们设计关系数据库Schema的都有一套完整的方案，而NoSQL却没有这些。半年前笔者读了本《SQL反模式》的书，觉得非常好。就开始留意，对于NoSQL是否也有反模式？好的反模式可以在我们设计Schema告诉哪里是陷阱和悬崖。NoSQL宣传的时候往往宣称是SchemaLess的，这会让人误解其不需要设计Schema。但如果不意识到设计Schema的必要，陷阱就在一直在黑暗中等着我们。这篇文章就总结一些别人的，也有自己犯过的深痛的设计Schema错误。</p>
<p>NoSQL数据库最主流的有文档数据库，列存数据库，键值数据库。三者分别有代表作MongoDB，HBase和Redis。如果将NoSQL比作兵器的话，可以这样(MySQL是典型的关系型数据库，一样参与比较)：</p>
<ul>
<li><strong>MySQL</strong>产生年代较早，而且随着LAMP大潮得以成熟。尽管其没有什么大的改进，但是新兴的互联网使用的最多的数据库。就像传统的菜刀，结构简单，几百年没有改进。但是不妨碍产生各式各样的刀法，只要有一把，就能胜任厨房里的大部分事务。MySQL也是一样，核心已经稳定。但是切库，分表，备份，监控，等等手段一应俱全。</li>
<li><strong>MongoDB</strong>是个新生事物，提供更灵活的Schema，Capped Collection，异步提交，地理位置索引等五花十色的功能。就像瑞士军刀，不但可以当刀用，还可以开瓶盖，剪指甲。但是他也不比MySQL强，因为还缺乏时间的磨砺。一是系统本身的稳定性，二是开发，运维需要更多经验才能流行。</li>
<li><strong>HBase</strong>是个仗势欺人的大象兵。依仗着Hadoop的生态环境，可以有很好的扩展性。但是就像象兵一样，使用者需要养一头大象(Hadoop),才能驱使他。</li>
<li><strong>Redis</strong>是键值存储的代表，功能最简单。提供随机数据存储。就像一根棒子一样，没有多余的构造。但是也正是因此，他的伸缩性特别好。就像悟空手里的金箍棒，大可捅破天，小能成缩成针。</li>
</ul>
<h3>文档数据库的得失</h3>
<p>关系模型试图将数据库模型和数据库实现分开，让开发者可以脱离底层很好的操作数据。但笔者以为关系模型在一些应用场景下有弱点，现在已经不得不面对。</p>
<ul>
<li><strong><strong><strong>SQL</strong></strong>弱点一：必须支持Join</strong>。因为数据不能够有重复。所以使用范式的关系模型会不可避免的大量Join。如果参与Join的是一张比内存小的表还好。但是如果大表Join或者表分布在多台机器上的话，Join就是性能的噩梦。</li>
<li><strong><strong>SQL弱点二：</strong>计算和存储耦合</strong>。关系模型作为统一的数据模型既可以用于数据分析，也可以用于在线业务。但这两者一个强调高吞吐，一个强调低延时，已经演化出完全不同的架构。用同一套模型来抽象显然是不合适的。Hadoop针对的就是计算的部分。MongoDB,Redis等针对在线业务。两者都抛弃了关系模型。</li>
</ul>
<p>针对这两个梦魇。文档数据库如MongoDB的的主要目的是<strong> 提供更丰富的数据结构来抛弃Join来适应在线业务</strong>。当然也不是MongoDB完全不能用Join，不能拿来做数据分析，讨论这个只是见仁见智的问题。所以文档数据库并不比关系数据库强大，由于对Join的弱支持，功能会弱许多。设计关系模型的时候，通常只需要考虑好数据直接的关系，定义数据模型。而设计文档数据库模型的时候，还需要考虑应用如何使用。因此设计好一个的文档数据库Schema比设计关系模型更加的困难。除此之外，由于文档数据库事务的支持也是比较弱，一般NoSQL只会提供一个行锁。这也给设计Schema更加增加了难度。对于文档数据库的使用有很多需要注意的地方，本文只关注模型设计的部分。</p>
<h3>反模式一：惯性思维/沿用关系模型</h3>
<p>关系模型是数据存储的经典模型，使用数据模型范式的好处非常的明显。但是由于文档数据库不支持Join(包括和外键息息相关的外键约束)等特性，习惯性的沿用关系模型有的时候会出现问题。需要利用起文档数据库提供的丰富的数据模型来应对。</p>
<p>值得一提的是文档数据库的设计和关系模型不同，是灵活多样的。对于同一个情形，可以设计出有多种能够工作的模型，没有绝对意义上最好的模型。</p>
<p>下图是关系模型和文档模型的对比。</p>
<p>这个一个博客的数据模型，有Blog,User等表。左侧是关系模型，右侧是文档模型。这个文档模型并不是完全合理，可以作为“正反两面教材”在下文不断阐述。</p>
<p><strong>问题一：存在描述多对多的关系表</strong><br />
症状：文档数据库中存储在有纯粹的关系表，例如：</p>
<table>
<tbody>
<tr>
<td valign="top" width="213">id</td>
<td valign="top" width="213">user_id</td>
<td valign="top" width="213">blog_id</td>
</tr>
<tr>
<td valign="top" width="213">0</td>
<td valign="top" width="213">0</td>
<td valign="top" width="213">0</td>
</tr>
<tr>
<td valign="top" width="213">1</td>
<td valign="top" width="213">0</td>
<td valign="top" width="213">1</td>
</tr>
</tbody>
</table>
<p>这样的表就算在关系模型中也是不妥的，因为这个ID非常的多余，可以用联合主键来解决。但是在文档数据库中，由于必须强制单主键，不得不采取这样的设计。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">破坏数据完备性。由于ID是主键，在数据模型上没有约束来保证不出现重复的user_id,blog_id对。一旦数据出现重复，更新删除都是问题。</span></li>
<li><span style="line-height: 22px;">索引过多。由于是关系表，必须在user_id和blog_id上面分别建一个索引。影响性能。</span></li>
</ol>
<p>解决方案：<br />
使用文档数据库典型的处理多对多的办法。不是建立一张关系表，而是在其中一个文档(如User)中，加入一个List字段。</p>
<div></div>
<table>
<tbody>
<tr>
<td valign="top" width="160">user_id</td>
<td valign="top" width="160">user_name</td>
<td valign="top" width="160">blog_id[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">Jake</td>
<td valign="top" width="160">0,1</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">1</td>
<td valign="top" width="160">Rose</td>
<td valign="top" width="160">1,2</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p><strong>问题二:没有区分&#8221;一对多关系&#8221;和“多对一关系”</strong><br />
症状：关系模型不区分“一对多”和“多对一”，对于文档数据库来讲，关系模型只有“多对一”。就像这张Comment表：</p>
<table>
<tbody>
<tr>
<td valign="top" width="160">comment_id</td>
<td valign="top" width="160">user_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“NoSQL反模式是好文章”</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">1</td>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“是啊”</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p>如果整个模型都是这样的“多对一”关系就需要反思了。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">额外索引。如果客户端已知user_id,需要获得User信息和Comment信息，需要执行两次查询。其中一次查询需要使用索引。并且要在客户端自己Join。这样可能有潜在性能问题。</span></li>
</ol>
<p>解决方案：<br />
问题的核心在于是已知user_id查询两张表，还是已知comment_id查询两张表。如果是已知comment_id这样的设计就是合理的，但是如果是已知user_id来查询，把关系放在user表里的设计更合理一些。</p>
<div></div>
<table>
<tbody>
<tr>
<td valign="top" width="160">user_id</td>
<td valign="top" width="160">user_name</td>
<td valign="top" width="160">comment_id[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">Jake</td>
<td valign="top" width="160">0,1</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">1</td>
<td valign="top" width="160">Rose</td>
<td valign="top" width="160">1,2</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p>这样的设计，就可以避免一个索引。同理，对于多对多也是一样的，通过合理的安排字段的位置可以避免索引。</p>
<p>正确使用的场合：</p>
<p>关系型模型是非常成功的数据模型，合理的沿用是非常好的。但是由于文档数据库的特点，需要适当的调整，这样得出的数据模型，尽管性能不是最优，但是有最好的灵活性。并且也有利于和关系数据库转换。</p>
<h3>反模式二：处处引用客户端Join</h3>
<p>症状：数据库设计中充满了xx_id的字端，在查询的时候需要大量的手动Join操作。就涉及到了这个反模式。正如上面提到的博客的关系模型，如果已知blog_id查询comments，需要至少执行3次查询，并且手动Join。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">手动Join，麻烦且易出错。文档数据库不支持Join且没有外键保证。因此需要在客户端Join，这样的操作对于软件开发来讲是比较繁琐的。由于没有外键保证，因此不能保证取得的ID在数据库里面是有数据的。在处理的时候需要不断判断，容易出错。</span></li>
<li><span style="line-height: 22px;">多次查询。如果引用过多，查询的时候需要多次查询才能查到足够的数据。本来文档数据库是很快的，但是由于多次查询，给数据库增加了压力，获取全部数据的时间也会增加。</span></li>
<li><span style="line-height: 22px;">事务处理繁琐。文档数据库一般不支持一般意义上事务，只支持行锁。如果文档数据库有给多个连接。在插入的时候，事务的处理就是噩梦。在文档数据库中使用事务，需要使用行锁，在进行大量的处理。太过繁琐，感兴趣的读者可以搜一下。</span></li>
</ol>
<p>解决方案：<br />
适当使用内联数据结构。由于文档数据库支持更复杂的数据结构可以将引用转换为内联的数据，而不用新建一张表。这样做可以解决上面的一些问题，是一个推荐的方案。就像上面博客的例子一样。将五张表简化成了两张表。那什么时候使用内联呢？一般认为</p>
<div>
<ul>
<li><span style="line-height: 19px;">使用内联可以解决读性能问题，明显减少Query的次数的时候。</span></li>
<li><span style="line-height: 19px;">可以简化数据模型，化简表之间的关系，而同时不会影响灵活性的时候。</span></li>
<li><span style="line-height: 19px;">事务可以得到简化为单行事务的时候</span></li>
</ul>
</div>
<div>正确使用的场合：</div>
<p>范式化的使用场景，文档数据库会被多个应用使用。由于数据库设计无法估计多个应用现在及将来的查询情况，需要极大的灵活性。在这个时候，使用引用比内联靠谱。</p>
<h3>反模式三 滥用内联后患无穷</h3>
<p><strong>问题一 妨碍到查询的内联</strong><br />
症状：频繁查询一些内联字段，丢弃其他字段。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">无ID约束：使用内联字段和引用不同，是没有ID约束的。因此不能通过ID(主键)来管理，如果经常需要单独操作内联对象会非常不便。</span></li>
<li><span style="line-height: 22px;">索引泛滥：如果以内联字段为条件进行查询，需要建立索引。有可能造成索引泛滥。</span></li>
<li><span style="line-height: 22px;">性能浪费：大部分文档数据库的实现是按行存储的，也就意味着，尽管只查询一个字段，但是DB需要将整行从磁盘中取出。如果字段够小，文档够大，是很不合算的。</span></li>
</ol>
<p>解决方案：<br />
如果出现以上的症结，就可以考虑使用引用代替内联了。内联特性主要的用途在于提高性能，如果出现性能不升反降，那就没有意义了。如果对性能有很强烈的要求，可以考虑使用重复数据，同样的数据即在内联字段中也在引用的表里面。这样可以结合内联和引用的性能优势。缺点是数据出现重复，维护会比较麻烦。</p>
<p><strong>问题二 无限膨胀的内联</strong><br />
症状：List,Map类型的内联字段不断膨胀，而且没有限制。就像前面提到的Blog的内联字段Comment。如果对每一篇Blog的Comment数量没有限制的话，Comment会无限膨胀。轻则影响性能，重则插入失败。</p>
<table>
<tbody>
<tr>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">Comment[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“…”</td>
<td valign="top" width="160">“NoSQL反模式是好文章”, “是啊”,”无限增长中”…</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">插入失败。文档数据库的每条记录都有最大大小，并且也有推荐最佳的大小。一般不会超过4M。就像刚刚提到的例子，如果是篇热门的博文的话，评论的大小很容易就超过4M。届时文档将无法更新，新的评论无法插入。</span></li>
<li><span style="line-height: 22px;">性能拖油瓶。由于内联字段膨胀，其大小将远远超过其他部分，影响其他部分的性能表现。并且因此导致该记录大小频繁变化，对档数据库的数据文件内部可能因此产生很多碎片。</span></li>
</ol>
<p>解决方案：<br />
设定最大数目或者使用引用。还是Blog和Comment的例子，可以将Comment从Blog中剥离出成一张表。如果考虑到性能，可以在Blog表中新建一个字段如最近的评论。这样既保证了性能，又能够预防膨胀。</p>
<table>
<tbody>
<tr>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">last_five_comment[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“…”</td>
<td valign="top" width="160">“NoSQL反模式是好文章”, “是啊”,”最多5条”…</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p><strong>问题三 无法维护的内联</strong><br />
症状：DBA想单独维护内联字段，但无法做到。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">权限管理难。数据库的权限管理的最小粒度是表。如果使用内联技术，就意味着内联部分必须和其他字段用同一个权限来管理。没有办法在DB级别隐藏。</span></li>
<li><span style="line-height: 22px;">切表难。如果发现一张表的庞大需要切表。这个时候就比较纠结了。如果一刀切，partion Key的选择；索引的失效都会成为问题。如果觉得拆为两张表，就会很好操作的话，就是内联的过度使用了 。</span></li>
<li><span style="line-height: 22px;">备份难。关系数据库中每张表可以有不同的备份策略。但是如果内联起来，这样的备份就做不到了。</span></li>
</ol>
<div><span style="line-height: 22px;">解决办法：</span></div>
<div>设计数据库模型的时候需要考量之后的维护操作，尤其是内联的字段需不需要单独的维护。需要和运维商量。如果对内联的字段有单独维护的要求，可以拆分出来作为引用。</div>
<p><strong>问题四 盯死应用的内联</strong><br />
症状：应用可以非常好的运行在数据库上。但是当新的应用接入的时候会很麻烦。因为设计数据模型的时候考虑到了查询。所以当有新应用，新查询接入的时候，就会难于使用原有的模型。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">新应用接入难。当新的应用试图使用同一个数据库的时候，接入比较困难。因为查询时不同的，需要调整数据模型才能适应。但是调整模型又会影响原有应用。</span></li>
<li><span style="line-height: 22px;">集成难。不同的关系型数据库可以集成在一起，共同使用。但是对于文档数据库，虽然功能上可以互补，但是由于内联数据结构的差异，也比较难于集成。</span></li>
<li><span style="line-height: 22px;">ETL难。现在大部分的数据分析系统使用的是关系模型，就连Hadoop虽然不用关系模型，但是其上的Hive的常用工具也是按关系模型设计的。<br />
</span></li>
</ol>
<p>解决方案：</p>
<p>使用范式设计数据库，即用引用代替内联。或者在使用内联的时候，给每个内联对象一个全局唯一的Key，保证其和关系模型直接可以存在映射关系，这样可以提高数据模型的灵活性。如Blog表：</p>
<div>
<table>
<tbody>
<tr>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">Comment[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“…”</td>
<td valign="top" width="160">[{&#8220;id&#8221;=1,&#8221;content&#8221;=“NoSQL反模式是好文章”}, {&#8220;id&#8221;=2,&#8221;content&#8221;=“是啊”}…]</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
</div>
<div></div>
<div>这样的设计既可以利用到内联的好处，又能将其和关系模型映射起来。确定是需要手动维护comment_id，保证其全局唯一性。</div>
<h3>反模式四：在线计算</h3>
<p>症状：有一些运行时间很长的Query,由于有聚合计算，索引也不能解决。随着数据量的增长，逐渐成为性能瓶颈。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">影响用户体验。在线业务中，如果一个查询大于4s，用户体验会急剧下降。按主键和按索引的查询都能满足要求。但是聚合操作往往需要扫描全表或者大量的数据，随着数据量的增加，查询时间会变长，用户不可容忍。</span></li>
<li><span style="line-height: 22px;">影响数据库性能。长查询的坏处数不清。在线上应用中，如果出现长查询，可能会霸占数据的大部分资源，包括IO，连接，CPU等等。导致其他很好的查询，轻则性能也下降，重者无法使用数据库。长查询可以称之为DB杀手。</span></li>
</ol>
<p>解决方案：<br />
首先要权衡，这个聚合操作是不是必要的，必须实时完成。如果没有必要实时完成的话，可以采取离线操作的方案。在夜深人静的时候，跑一个长查询，将结果缓存起来，给第二天使用。如果必须实时完成，则可以新建一个字段，用“incr”这样的操作，在运行的时候，实时聚合结果。而不是查询的时候执行一次长查询。如果逻辑比较复杂，或者觉得大量“incr”操作给数据库系统带来了压力，可以使用Storm之类的实时数据处理框架。总之，要慎用长查询。</p>
<h3>反模式五：把内联Map对象的Key当作ID用</h3>
<p>症状：文档数据库支持内联Map类型。将其中Map的Key当作数据库的主键来用。</p>
<table>
<tbody>
<tr>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">Comment{}</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“…”</td>
<td valign="top" width="160">{&#8220;1&#8243;=“NoSQL反模式是好文章”, &#8220;2&#8221;=“是啊”}</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
<p>这个反模式很容易犯，因为在编程语言中Map数据结构就是这么用的。但是对于数据库模型来说，这是不折不扣的反模式。</p>
<p>坏处：</p>
<ol>
<li><span style="line-height: 22px;">无法通过数据库做各种(&gt;&lt;=)查询。对于关系型数据库来说，虽然数据结构可以很灵活，但查询的时候都是按层次的。比如comment.id，comment.content。也就是说其Map类型中的Key可以理解为属性名的，而不是用作ID。因此一旦这样使用，就脱离的数据库管制，无法使用各种查询功能。</span></li>
<li><span style="line-height: 22px;">无法通过索引查询。文档数据可建立索引是需要列名的。比如comment.id。而这样的数据结构没有固定的列名，因此无法建立索引。</span></li>
</ol>
<p>解决方案：<br />
使用数组+Map来解决。如：</p>
<div>
<table>
<tbody>
<tr>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">Comment[]</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">“…”</td>
<td valign="top" width="160">[{&#8220;id&#8221;=1,&#8221;content&#8221;=“NoSQL反模式是好文章”}, {&#8220;id&#8221;=2,&#8221;content&#8221;=“是啊”}…]</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
</div>
<div></div>
<div>这样，就可以使用comment.id作为索引，也可以使用数据库的查询功能。简单有效。Map类型中的Key是属性名，Value是属性值。这样的用法是文档数据库数据模型的本意，因此其提供的各种功能才能利用上。否则就无法使用。</div>
<h3>反模式六：不合理的ID</h3>
<p>症状：使用String甚至更复杂数据结构作为的ID，或者全部使用数据库提供的自生成ID。如：</p>
<div>
<table>
<tbody>
<tr>
<td valign="top" width="160">id(该ID系系统自生成）</td>
<td valign="top" width="160">Blog_id</td>
<td valign="top" width="160">content</td>
<td valign="top" width="160">……</td>
</tr>
<tr>
<td valign="top" width="160">0</td>
<td valign="top" width="160">0</td>
<td valign="top" width="160">&#8230;</td>
<td valign="top" width="160">……</td>
</tr>
</tbody>
</table>
</div>
<p>坏处:</p>
<ol>
<li><span style="line-height: 22px;">ID混乱。如果使用数据库提供的自生成ID，同时表中还有一个类似有主键含义的Blog_id，这样很不好，容易造成逻辑混乱。由于文档数据库不支持ID的重命名，习惯关系数据库做法的人可能会再建立一个自己的逻辑ID字段。这是没有必要的。</span></li>
<li><span style="line-height: 22px;">索引庞大，性能低下。ID是数据库的非常重要的部分。ID的长度将决定索引(包括主键的索引)的大小，直接影响到数据库性能。如果索引比内存小，性能会很好。但一旦索引大小超过内存，出现数据交换，性能会急剧下降。一个Long占8字节，一个20个字符的UTF8 String占用约60个字节。相差10倍之巨，不能不考虑。</span></li>
</ol>
<p>解决方案：<br />
尽量使用有一定意义的字段做ID，并且不在其他字段中重复出现。不使用复杂的数据类型做ID，只使用int,long或者系统提供的主键类型做ID。</p>
<h3>文档数据库的反模式总结</h3>
<p>阐述了这么多的反模式，下面有个一览表，涵盖了上面所有的反模式。这个一览表，是按照文档数据库模型建立的。是个文档数据库模型的例子。</p>
<table>
<tbody>
<tr>
<td>ID</td>
<td>反模式名</td>
<td>问题</td>
</tr>
<tr>
<td valign="top" width="55">0</td>
<td valign="top" width="108">存在描述多对多的关系表</td>
<td valign="top" width="601">[{ID：00<br />
症状：文档数据库中存储在有纯粹的关系表<br />
坏处：[破坏数据完备性，索引过多]<br />
解决方案：加入一个List字段<br />
},{<br />
ID：01<br />
症状：关系模型不区分“一对多”和“多对一”<br />
坏处：额外索引<br />
解决方案：合理的安排字段的位置<br />
}]</td>
</tr>
<tr>
<td valign="top" width="55">1</td>
<td valign="top" width="108">处处引用客户端Join</td>
<td valign="top" width="601">[{<br />
ID：10<br />
症状：查询的时候需要大量的手动Join操作<br />
坏处：[手动Join，多次查询, 事务处理繁琐]<br />
解决方案：适当使用内联数据结构。<br />
}]</td>
</tr>
<tr>
<td valign="top" width="55">2</td>
<td valign="top" width="108">滥用内联后患无穷</td>
<td valign="top" width="601">[{<br />
ID：20<br />
症状：频繁查询一些内联字段，丢弃其他字段<br />
坏处：[无ID约束，索引泛滥, 性能浪费]<br />
解决方案：使用引用代替内联了,允许重复数据<br />
},{<br />
ID：21<br />
症状：List,Map类型的内联字段不断膨胀，而且没有限制<br />
坏处：[插入失败, 性能拖油瓶]<br />
解决方案：设定最大数目或者使用引用。<br />
},{<br />
ID：22<br />
症状：DBA想单独维护内联字段，但无法做到<br />
坏处：[权限管理难, 切表难, 备份难]<br />
解决方案：设计数据库模型的时候需要考量之后的维护操作<br />
},{<br />
ID：23<br />
症状：应用可以非常好的运行在数据库上。但是当新的应用接入的时候会很麻烦。内联盯死了应用<br />
坏处：[新应用接入难, 集成难, ETL难]<br />
解决方案：使用范式设计数据库，即用引用代替内联。保证其和关系模型直接可以存在映射关系<br />
}]</td>
</tr>
<tr>
<td valign="top" width="55">3</td>
<td valign="top" width="108">在线计算</td>
<td valign="top" width="601">[{<br />
ID：30<br />
症状：有一些运行时间很长的Query, 逐渐成为性能瓶颈。<br />
坏处：[影响用户体验，影响数据库性能]<br />
解决方案：取消不必要的聚合操作. 运行的时候，实时聚合结果.使用第三方实时或非实时工具。如Hadoop，Storm.<br />
}]</td>
</tr>
<tr>
<td valign="top" width="55">4</td>
<td valign="top" width="108">把内联Map对象的Key当作ID用</td>
<td valign="top" width="601">[{<br />
ID：40<br />
症状：文档数据库支持内联Map类型。将其中Map的Key当作数据库的主键来用。<br />
坏处：[无法通过数据库做各种(&gt;&lt;&#8220;&#8221;&#8221; =)查询，无法通过索引查询]<br />
解决方案：使用数组+Map来解决。<br />
}]</td>
</tr>
<tr>
<td valign="top" width="55">5</td>
<td valign="top" width="108">不合理的ID</td>
<td valign="top" width="601">[{<br />
ID：50<br />
症状：用String甚至更复杂数据结构作为的ID，或者全部使用数据库提供的自生成ID。<br />
坏处：[ID混乱，索引庞大]<br />
解决方案：尽量使用有一定意义的字段做ID。不使用复杂的数据类型做ID。<br />
}]</td>
</tr>
</tbody>
</table>
<p>本文试图总结了笔者知道的重要的文档数据库的反模式。现在关于NoSQL数据模型设计模式的讨论才刚刚起步，将来也许会逐渐自成体系。对于列数据库和Key-Value的反模式，笔者等到有了足够积累的时候，再和大家分享。</p>
<div></div>
<p><a rel="nofollow" href="./../../../../nosql-anti-pattern-document/index.html">NoSQL反模式 &#8211; 文档数据库篇</a>最先出现在<a rel="nofollow" href="./../../../../index.html">我自然</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../../../nosql-anti-pattern-document/feed/index.html</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
	</channel>
</rss>
